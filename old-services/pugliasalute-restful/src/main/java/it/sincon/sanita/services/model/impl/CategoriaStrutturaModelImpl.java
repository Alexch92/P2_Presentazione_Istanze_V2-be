package it.sincon.sanita.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import it.sincon.sanita.services.model.CategoriaStruttura;
import it.sincon.sanita.services.model.CategoriaStrutturaModel;
import it.sincon.sanita.services.model.CategoriaStrutturaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CategoriaStruttura service. Represents a row in the &quot;SANITAREST_CategoriaStruttura&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.sincon.sanita.services.model.CategoriaStrutturaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CategoriaStrutturaImpl}.
 * </p>
 *
 * @author Sincon
 * @see CategoriaStrutturaImpl
 * @see it.sincon.sanita.services.model.CategoriaStruttura
 * @see it.sincon.sanita.services.model.CategoriaStrutturaModel
 * @generated
 */
@JSON(strict = true)
public class CategoriaStrutturaModelImpl extends BaseModelImpl<CategoriaStruttura>
    implements CategoriaStrutturaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a categoria struttura model instance should use the {@link it.sincon.sanita.services.model.CategoriaStruttura} interface instead.
     */
    public static final String TABLE_NAME = "SANITAREST_CategoriaStruttura";
    public static final Object[][] TABLE_COLUMNS = {
            { "idTipoStruttura", Types.VARCHAR },
            { "denominazione", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table SANITAREST_CategoriaStruttura (idTipoStruttura VARCHAR(75) not null primary key,denominazione VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table SANITAREST_CategoriaStruttura";
    public static final String ORDER_BY_JPQL = " ORDER BY categoriaStruttura.idTipoStruttura ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SANITAREST_CategoriaStruttura.idTipoStruttura ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.it.sincon.sanita.services.model.CategoriaStruttura"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.it.sincon.sanita.services.model.CategoriaStruttura"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.it.sincon.sanita.services.model.CategoriaStruttura"));
    private static ClassLoader _classLoader = CategoriaStruttura.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            CategoriaStruttura.class
        };
    private String _idTipoStruttura;
    private String _denominazione;
    private CategoriaStruttura _escapedModel;

    public CategoriaStrutturaModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static CategoriaStruttura toModel(CategoriaStrutturaSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        CategoriaStruttura model = new CategoriaStrutturaImpl();

        model.setIdTipoStruttura(soapModel.getIdTipoStruttura());
        model.setDenominazione(soapModel.getDenominazione());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<CategoriaStruttura> toModels(
        CategoriaStrutturaSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<CategoriaStruttura> models = new ArrayList<CategoriaStruttura>(soapModels.length);

        for (CategoriaStrutturaSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _idTipoStruttura;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setIdTipoStruttura(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idTipoStruttura;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return CategoriaStruttura.class;
    }

    @Override
    public String getModelClassName() {
        return CategoriaStruttura.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idTipoStruttura", getIdTipoStruttura());
        attributes.put("denominazione", getDenominazione());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String idTipoStruttura = (String) attributes.get("idTipoStruttura");

        if (idTipoStruttura != null) {
            setIdTipoStruttura(idTipoStruttura);
        }

        String denominazione = (String) attributes.get("denominazione");

        if (denominazione != null) {
            setDenominazione(denominazione);
        }
    }

    @JSON
    @Override
    public String getIdTipoStruttura() {
        if (_idTipoStruttura == null) {
            return StringPool.BLANK;
        } else {
            return _idTipoStruttura;
        }
    }

    @Override
    public void setIdTipoStruttura(String idTipoStruttura) {
        _idTipoStruttura = idTipoStruttura;
    }

    @JSON
    @Override
    public String getDenominazione() {
        if (_denominazione == null) {
            return StringPool.BLANK;
        } else {
            return _denominazione;
        }
    }

    @Override
    public void setDenominazione(String denominazione) {
        _denominazione = denominazione;
    }

    @Override
    public CategoriaStruttura toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (CategoriaStruttura) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CategoriaStrutturaImpl categoriaStrutturaImpl = new CategoriaStrutturaImpl();

        categoriaStrutturaImpl.setIdTipoStruttura(getIdTipoStruttura());
        categoriaStrutturaImpl.setDenominazione(getDenominazione());

        categoriaStrutturaImpl.resetOriginalValues();

        return categoriaStrutturaImpl;
    }

    @Override
    public int compareTo(CategoriaStruttura categoriaStruttura) {
        String primaryKey = categoriaStruttura.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof CategoriaStruttura)) {
            return false;
        }

        CategoriaStruttura categoriaStruttura = (CategoriaStruttura) obj;

        String primaryKey = categoriaStruttura.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<CategoriaStruttura> toCacheModel() {
        CategoriaStrutturaCacheModel categoriaStrutturaCacheModel = new CategoriaStrutturaCacheModel();

        categoriaStrutturaCacheModel.idTipoStruttura = getIdTipoStruttura();

        String idTipoStruttura = categoriaStrutturaCacheModel.idTipoStruttura;

        if ((idTipoStruttura != null) && (idTipoStruttura.length() == 0)) {
            categoriaStrutturaCacheModel.idTipoStruttura = null;
        }

        categoriaStrutturaCacheModel.denominazione = getDenominazione();

        String denominazione = categoriaStrutturaCacheModel.denominazione;

        if ((denominazione != null) && (denominazione.length() == 0)) {
            categoriaStrutturaCacheModel.denominazione = null;
        }

        return categoriaStrutturaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{idTipoStruttura=");
        sb.append(getIdTipoStruttura());
        sb.append(", denominazione=");
        sb.append(getDenominazione());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("it.sincon.sanita.services.model.CategoriaStruttura");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idTipoStruttura</column-name><column-value><![CDATA[");
        sb.append(getIdTipoStruttura());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>denominazione</column-name><column-value><![CDATA[");
        sb.append(getDenominazione());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
