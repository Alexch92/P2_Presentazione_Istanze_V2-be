package it.sincon.sanita.services.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.sincon.sanita.services.model.StrutturaSanitariaFiglia;
import it.sincon.sanita.services.model.StrutturaSanitariaFigliaModel;
import it.sincon.sanita.services.model.StrutturaSanitariaFigliaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StrutturaSanitariaFiglia service. Represents a row in the &quot;SANITAREST_StrutturaSanitariaFiglia&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.sincon.sanita.services.model.StrutturaSanitariaFigliaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StrutturaSanitariaFigliaImpl}.
 * </p>
 *
 * @author Sincon
 * @see StrutturaSanitariaFigliaImpl
 * @see it.sincon.sanita.services.model.StrutturaSanitariaFiglia
 * @see it.sincon.sanita.services.model.StrutturaSanitariaFigliaModel
 * @generated
 */
@JSON(strict = true)
public class StrutturaSanitariaFigliaModelImpl extends BaseModelImpl<StrutturaSanitariaFiglia>
    implements StrutturaSanitariaFigliaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a struttura sanitaria figlia model instance should use the {@link it.sincon.sanita.services.model.StrutturaSanitariaFiglia} interface instead.
     */
    public static final String TABLE_NAME = "SANITAREST_StrutturaSanitariaFiglia";
    public static final Object[][] TABLE_COLUMNS = {
            { "idStrutturaFiglia", Types.BIGINT },
            { "tipoStruttura", Types.VARCHAR },
            { "denominazione", Types.VARCHAR },
            { "indirizzo", Types.VARCHAR },
            { "direttore", Types.VARCHAR },
            { "responsabileSanitario", Types.VARCHAR },
            { "telefono", Types.VARCHAR },
            { "email", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table SANITAREST_StrutturaSanitariaFiglia (idStrutturaFiglia LONG not null primary key,tipoStruttura VARCHAR(75) null,denominazione VARCHAR(75) null,indirizzo VARCHAR(75) null,direttore VARCHAR(75) null,responsabileSanitario VARCHAR(75) null,telefono VARCHAR(75) null,email VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table SANITAREST_StrutturaSanitariaFiglia";
    public static final String ORDER_BY_JPQL = " ORDER BY strutturaSanitariaFiglia.idStrutturaFiglia ASC";
    public static final String ORDER_BY_SQL = " ORDER BY SANITAREST_StrutturaSanitariaFiglia.idStrutturaFiglia ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.it.sincon.sanita.services.model.StrutturaSanitariaFiglia"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.it.sincon.sanita.services.model.StrutturaSanitariaFiglia"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.it.sincon.sanita.services.model.StrutturaSanitariaFiglia"));
    private static ClassLoader _classLoader = StrutturaSanitariaFiglia.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            StrutturaSanitariaFiglia.class
        };
    private long _idStrutturaFiglia;
    private String _tipoStruttura;
    private String _denominazione;
    private String _indirizzo;
    private String _direttore;
    private String _responsabileSanitario;
    private String _telefono;
    private String _email;
    private StrutturaSanitariaFiglia _escapedModel;

    public StrutturaSanitariaFigliaModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static StrutturaSanitariaFiglia toModel(
        StrutturaSanitariaFigliaSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        StrutturaSanitariaFiglia model = new StrutturaSanitariaFigliaImpl();

        model.setIdStrutturaFiglia(soapModel.getIdStrutturaFiglia());
        model.setTipoStruttura(soapModel.getTipoStruttura());
        model.setDenominazione(soapModel.getDenominazione());
        model.setIndirizzo(soapModel.getIndirizzo());
        model.setDirettore(soapModel.getDirettore());
        model.setResponsabileSanitario(soapModel.getResponsabileSanitario());
        model.setTelefono(soapModel.getTelefono());
        model.setEmail(soapModel.getEmail());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<StrutturaSanitariaFiglia> toModels(
        StrutturaSanitariaFigliaSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<StrutturaSanitariaFiglia> models = new ArrayList<StrutturaSanitariaFiglia>(soapModels.length);

        for (StrutturaSanitariaFigliaSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _idStrutturaFiglia;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setIdStrutturaFiglia(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _idStrutturaFiglia;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return StrutturaSanitariaFiglia.class;
    }

    @Override
    public String getModelClassName() {
        return StrutturaSanitariaFiglia.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("idStrutturaFiglia", getIdStrutturaFiglia());
        attributes.put("tipoStruttura", getTipoStruttura());
        attributes.put("denominazione", getDenominazione());
        attributes.put("indirizzo", getIndirizzo());
        attributes.put("direttore", getDirettore());
        attributes.put("responsabileSanitario", getResponsabileSanitario());
        attributes.put("telefono", getTelefono());
        attributes.put("email", getEmail());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long idStrutturaFiglia = (Long) attributes.get("idStrutturaFiglia");

        if (idStrutturaFiglia != null) {
            setIdStrutturaFiglia(idStrutturaFiglia);
        }

        String tipoStruttura = (String) attributes.get("tipoStruttura");

        if (tipoStruttura != null) {
            setTipoStruttura(tipoStruttura);
        }

        String denominazione = (String) attributes.get("denominazione");

        if (denominazione != null) {
            setDenominazione(denominazione);
        }

        String indirizzo = (String) attributes.get("indirizzo");

        if (indirizzo != null) {
            setIndirizzo(indirizzo);
        }

        String direttore = (String) attributes.get("direttore");

        if (direttore != null) {
            setDirettore(direttore);
        }

        String responsabileSanitario = (String) attributes.get(
                "responsabileSanitario");

        if (responsabileSanitario != null) {
            setResponsabileSanitario(responsabileSanitario);
        }

        String telefono = (String) attributes.get("telefono");

        if (telefono != null) {
            setTelefono(telefono);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }
    }

    @JSON
    @Override
    public long getIdStrutturaFiglia() {
        return _idStrutturaFiglia;
    }

    @Override
    public void setIdStrutturaFiglia(long idStrutturaFiglia) {
        _idStrutturaFiglia = idStrutturaFiglia;
    }

    @JSON
    @Override
    public String getTipoStruttura() {
        if (_tipoStruttura == null) {
            return StringPool.BLANK;
        } else {
            return _tipoStruttura;
        }
    }

    @Override
    public void setTipoStruttura(String tipoStruttura) {
        _tipoStruttura = tipoStruttura;
    }

    @JSON
    @Override
    public String getDenominazione() {
        if (_denominazione == null) {
            return StringPool.BLANK;
        } else {
            return _denominazione;
        }
    }

    @Override
    public void setDenominazione(String denominazione) {
        _denominazione = denominazione;
    }

    @JSON
    @Override
    public String getIndirizzo() {
        if (_indirizzo == null) {
            return StringPool.BLANK;
        } else {
            return _indirizzo;
        }
    }

    @Override
    public void setIndirizzo(String indirizzo) {
        _indirizzo = indirizzo;
    }

    @JSON
    @Override
    public String getDirettore() {
        if (_direttore == null) {
            return StringPool.BLANK;
        } else {
            return _direttore;
        }
    }

    @Override
    public void setDirettore(String direttore) {
        _direttore = direttore;
    }

    @JSON
    @Override
    public String getResponsabileSanitario() {
        if (_responsabileSanitario == null) {
            return StringPool.BLANK;
        } else {
            return _responsabileSanitario;
        }
    }

    @Override
    public void setResponsabileSanitario(String responsabileSanitario) {
        _responsabileSanitario = responsabileSanitario;
    }

    @JSON
    @Override
    public String getTelefono() {
        if (_telefono == null) {
            return StringPool.BLANK;
        } else {
            return _telefono;
        }
    }

    @Override
    public void setTelefono(String telefono) {
        _telefono = telefono;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            StrutturaSanitariaFiglia.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public StrutturaSanitariaFiglia toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (StrutturaSanitariaFiglia) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        StrutturaSanitariaFigliaImpl strutturaSanitariaFigliaImpl = new StrutturaSanitariaFigliaImpl();

        strutturaSanitariaFigliaImpl.setIdStrutturaFiglia(getIdStrutturaFiglia());
        strutturaSanitariaFigliaImpl.setTipoStruttura(getTipoStruttura());
        strutturaSanitariaFigliaImpl.setDenominazione(getDenominazione());
        strutturaSanitariaFigliaImpl.setIndirizzo(getIndirizzo());
        strutturaSanitariaFigliaImpl.setDirettore(getDirettore());
        strutturaSanitariaFigliaImpl.setResponsabileSanitario(getResponsabileSanitario());
        strutturaSanitariaFigliaImpl.setTelefono(getTelefono());
        strutturaSanitariaFigliaImpl.setEmail(getEmail());

        strutturaSanitariaFigliaImpl.resetOriginalValues();

        return strutturaSanitariaFigliaImpl;
    }

    @Override
    public int compareTo(StrutturaSanitariaFiglia strutturaSanitariaFiglia) {
        long primaryKey = strutturaSanitariaFiglia.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof StrutturaSanitariaFiglia)) {
            return false;
        }

        StrutturaSanitariaFiglia strutturaSanitariaFiglia = (StrutturaSanitariaFiglia) obj;

        long primaryKey = strutturaSanitariaFiglia.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<StrutturaSanitariaFiglia> toCacheModel() {
        StrutturaSanitariaFigliaCacheModel strutturaSanitariaFigliaCacheModel = new StrutturaSanitariaFigliaCacheModel();

        strutturaSanitariaFigliaCacheModel.idStrutturaFiglia = getIdStrutturaFiglia();

        strutturaSanitariaFigliaCacheModel.tipoStruttura = getTipoStruttura();

        String tipoStruttura = strutturaSanitariaFigliaCacheModel.tipoStruttura;

        if ((tipoStruttura != null) && (tipoStruttura.length() == 0)) {
            strutturaSanitariaFigliaCacheModel.tipoStruttura = null;
        }

        strutturaSanitariaFigliaCacheModel.denominazione = getDenominazione();

        String denominazione = strutturaSanitariaFigliaCacheModel.denominazione;

        if ((denominazione != null) && (denominazione.length() == 0)) {
            strutturaSanitariaFigliaCacheModel.denominazione = null;
        }

        strutturaSanitariaFigliaCacheModel.indirizzo = getIndirizzo();

        String indirizzo = strutturaSanitariaFigliaCacheModel.indirizzo;

        if ((indirizzo != null) && (indirizzo.length() == 0)) {
            strutturaSanitariaFigliaCacheModel.indirizzo = null;
        }

        strutturaSanitariaFigliaCacheModel.direttore = getDirettore();

        String direttore = strutturaSanitariaFigliaCacheModel.direttore;

        if ((direttore != null) && (direttore.length() == 0)) {
            strutturaSanitariaFigliaCacheModel.direttore = null;
        }

        strutturaSanitariaFigliaCacheModel.responsabileSanitario = getResponsabileSanitario();

        String responsabileSanitario = strutturaSanitariaFigliaCacheModel.responsabileSanitario;

        if ((responsabileSanitario != null) &&
                (responsabileSanitario.length() == 0)) {
            strutturaSanitariaFigliaCacheModel.responsabileSanitario = null;
        }

        strutturaSanitariaFigliaCacheModel.telefono = getTelefono();

        String telefono = strutturaSanitariaFigliaCacheModel.telefono;

        if ((telefono != null) && (telefono.length() == 0)) {
            strutturaSanitariaFigliaCacheModel.telefono = null;
        }

        strutturaSanitariaFigliaCacheModel.email = getEmail();

        String email = strutturaSanitariaFigliaCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            strutturaSanitariaFigliaCacheModel.email = null;
        }

        return strutturaSanitariaFigliaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(17);

        sb.append("{idStrutturaFiglia=");
        sb.append(getIdStrutturaFiglia());
        sb.append(", tipoStruttura=");
        sb.append(getTipoStruttura());
        sb.append(", denominazione=");
        sb.append(getDenominazione());
        sb.append(", indirizzo=");
        sb.append(getIndirizzo());
        sb.append(", direttore=");
        sb.append(getDirettore());
        sb.append(", responsabileSanitario=");
        sb.append(getResponsabileSanitario());
        sb.append(", telefono=");
        sb.append(getTelefono());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(28);

        sb.append("<model><model-name>");
        sb.append("it.sincon.sanita.services.model.StrutturaSanitariaFiglia");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>idStrutturaFiglia</column-name><column-value><![CDATA[");
        sb.append(getIdStrutturaFiglia());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tipoStruttura</column-name><column-value><![CDATA[");
        sb.append(getTipoStruttura());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>denominazione</column-name><column-value><![CDATA[");
        sb.append(getDenominazione());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>indirizzo</column-name><column-value><![CDATA[");
        sb.append(getIndirizzo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>direttore</column-name><column-value><![CDATA[");
        sb.append(getDirettore());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>responsabileSanitario</column-name><column-value><![CDATA[");
        sb.append(getResponsabileSanitario());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>telefono</column-name><column-value><![CDATA[");
        sb.append(getTelefono());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
