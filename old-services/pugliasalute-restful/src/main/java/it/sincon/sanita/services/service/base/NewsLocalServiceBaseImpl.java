package it.sincon.sanita.services.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import it.sincon.sanita.services.model.News;
import it.sincon.sanita.services.service.NewsLocalService;
import it.sincon.sanita.services.service.persistence.CFG_CategorieAbilitatePersistence;
import it.sincon.sanita.services.service.persistence.CategoriaStrutturaPersistence;
import it.sincon.sanita.services.service.persistence.NewsFinder;
import it.sincon.sanita.services.service.persistence.NewsPersistence;
import it.sincon.sanita.services.service.persistence.StrutturaSanitariaFigliaPersistence;
import it.sincon.sanita.services.service.persistence.StrutturaSanitariaFinder;
import it.sincon.sanita.services.service.persistence.StrutturaSanitariaPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the news local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link it.sincon.sanita.services.service.impl.NewsLocalServiceImpl}.
 * </p>
 *
 * @author Sincon
 * @see it.sincon.sanita.services.service.impl.NewsLocalServiceImpl
 * @see it.sincon.sanita.services.service.NewsLocalServiceUtil
 * @generated
 */
public abstract class NewsLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements NewsLocalService, IdentifiableBean {
    @BeanReference(type = it.sincon.sanita.services.service.CategoriaStrutturaLocalService.class)
    protected it.sincon.sanita.services.service.CategoriaStrutturaLocalService categoriaStrutturaLocalService;
    @BeanReference(type = it.sincon.sanita.services.service.CategoriaStrutturaService.class)
    protected it.sincon.sanita.services.service.CategoriaStrutturaService categoriaStrutturaService;
    @BeanReference(type = CategoriaStrutturaPersistence.class)
    protected CategoriaStrutturaPersistence categoriaStrutturaPersistence;
    @BeanReference(type = it.sincon.sanita.services.service.CFG_CategorieAbilitateLocalService.class)
    protected it.sincon.sanita.services.service.CFG_CategorieAbilitateLocalService cfg_CategorieAbilitateLocalService;
    @BeanReference(type = CFG_CategorieAbilitatePersistence.class)
    protected CFG_CategorieAbilitatePersistence cfg_CategorieAbilitatePersistence;
    @BeanReference(type = it.sincon.sanita.services.service.NewsLocalService.class)
    protected it.sincon.sanita.services.service.NewsLocalService newsLocalService;
    @BeanReference(type = it.sincon.sanita.services.service.NewsService.class)
    protected it.sincon.sanita.services.service.NewsService newsService;
    @BeanReference(type = NewsPersistence.class)
    protected NewsPersistence newsPersistence;
    @BeanReference(type = NewsFinder.class)
    protected NewsFinder newsFinder;
    @BeanReference(type = it.sincon.sanita.services.service.StrutturaSanitariaLocalService.class)
    protected it.sincon.sanita.services.service.StrutturaSanitariaLocalService strutturaSanitariaLocalService;
    @BeanReference(type = it.sincon.sanita.services.service.StrutturaSanitariaService.class)
    protected it.sincon.sanita.services.service.StrutturaSanitariaService strutturaSanitariaService;
    @BeanReference(type = StrutturaSanitariaPersistence.class)
    protected StrutturaSanitariaPersistence strutturaSanitariaPersistence;
    @BeanReference(type = StrutturaSanitariaFinder.class)
    protected StrutturaSanitariaFinder strutturaSanitariaFinder;
    @BeanReference(type = it.sincon.sanita.services.service.StrutturaSanitariaFigliaLocalService.class)
    protected it.sincon.sanita.services.service.StrutturaSanitariaFigliaLocalService strutturaSanitariaFigliaLocalService;
    @BeanReference(type = it.sincon.sanita.services.service.StrutturaSanitariaFigliaService.class)
    protected it.sincon.sanita.services.service.StrutturaSanitariaFigliaService strutturaSanitariaFigliaService;
    @BeanReference(type = StrutturaSanitariaFigliaPersistence.class)
    protected StrutturaSanitariaFigliaPersistence strutturaSanitariaFigliaPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private NewsLocalServiceClpInvoker _clpInvoker = new NewsLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link it.sincon.sanita.services.service.NewsLocalServiceUtil} to access the news local service.
     */

    /**
     * Adds the news to the database. Also notifies the appropriate model listeners.
     *
     * @param news the news
     * @return the news that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public News addNews(News news) throws SystemException {
        news.setNew(true);

        return newsPersistence.update(news);
    }

    /**
     * Creates a new news with the primary key. Does not add the news to the database.
     *
     * @param pk the primary key for the new news
     * @return the new news
     */
    @Override
    public News createNews(long pk) {
        return newsPersistence.create(pk);
    }

    /**
     * Deletes the news with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param pk the primary key of the news
     * @return the news that was removed
     * @throws PortalException if a news with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public News deleteNews(long pk) throws PortalException, SystemException {
        return newsPersistence.remove(pk);
    }

    /**
     * Deletes the news from the database. Also notifies the appropriate model listeners.
     *
     * @param news the news
     * @return the news that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public News deleteNews(News news) throws SystemException {
        return newsPersistence.remove(news);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(News.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return newsPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.sincon.sanita.services.model.impl.NewsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return newsPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.sincon.sanita.services.model.impl.NewsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return newsPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return newsPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return newsPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public News fetchNews(long pk) throws SystemException {
        return newsPersistence.fetchByPrimaryKey(pk);
    }

    /**
     * Returns the news with the primary key.
     *
     * @param pk the primary key of the news
     * @return the news
     * @throws PortalException if a news with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public News getNews(long pk) throws PortalException, SystemException {
        return newsPersistence.findByPrimaryKey(pk);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return newsPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the newses.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.sincon.sanita.services.model.impl.NewsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of newses
     * @param end the upper bound of the range of newses (not inclusive)
     * @return the range of newses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<News> getNewses(int start, int end) throws SystemException {
        return newsPersistence.findAll(start, end);
    }

    /**
     * Returns the number of newses.
     *
     * @return the number of newses
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getNewsesCount() throws SystemException {
        return newsPersistence.countAll();
    }

    /**
     * Updates the news in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param news the news
     * @return the news that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public News updateNews(News news) throws SystemException {
        return newsPersistence.update(news);
    }

    /**
     * Returns the categoria struttura local service.
     *
     * @return the categoria struttura local service
     */
    public it.sincon.sanita.services.service.CategoriaStrutturaLocalService getCategoriaStrutturaLocalService() {
        return categoriaStrutturaLocalService;
    }

    /**
     * Sets the categoria struttura local service.
     *
     * @param categoriaStrutturaLocalService the categoria struttura local service
     */
    public void setCategoriaStrutturaLocalService(
        it.sincon.sanita.services.service.CategoriaStrutturaLocalService categoriaStrutturaLocalService) {
        this.categoriaStrutturaLocalService = categoriaStrutturaLocalService;
    }

    /**
     * Returns the categoria struttura remote service.
     *
     * @return the categoria struttura remote service
     */
    public it.sincon.sanita.services.service.CategoriaStrutturaService getCategoriaStrutturaService() {
        return categoriaStrutturaService;
    }

    /**
     * Sets the categoria struttura remote service.
     *
     * @param categoriaStrutturaService the categoria struttura remote service
     */
    public void setCategoriaStrutturaService(
        it.sincon.sanita.services.service.CategoriaStrutturaService categoriaStrutturaService) {
        this.categoriaStrutturaService = categoriaStrutturaService;
    }

    /**
     * Returns the categoria struttura persistence.
     *
     * @return the categoria struttura persistence
     */
    public CategoriaStrutturaPersistence getCategoriaStrutturaPersistence() {
        return categoriaStrutturaPersistence;
    }

    /**
     * Sets the categoria struttura persistence.
     *
     * @param categoriaStrutturaPersistence the categoria struttura persistence
     */
    public void setCategoriaStrutturaPersistence(
        CategoriaStrutturaPersistence categoriaStrutturaPersistence) {
        this.categoriaStrutturaPersistence = categoriaStrutturaPersistence;
    }

    /**
     * Returns the c f g_ categorie abilitate local service.
     *
     * @return the c f g_ categorie abilitate local service
     */
    public it.sincon.sanita.services.service.CFG_CategorieAbilitateLocalService getCFG_CategorieAbilitateLocalService() {
        return cfg_CategorieAbilitateLocalService;
    }

    /**
     * Sets the c f g_ categorie abilitate local service.
     *
     * @param cfg_CategorieAbilitateLocalService the c f g_ categorie abilitate local service
     */
    public void setCFG_CategorieAbilitateLocalService(
        it.sincon.sanita.services.service.CFG_CategorieAbilitateLocalService cfg_CategorieAbilitateLocalService) {
        this.cfg_CategorieAbilitateLocalService = cfg_CategorieAbilitateLocalService;
    }

    /**
     * Returns the c f g_ categorie abilitate persistence.
     *
     * @return the c f g_ categorie abilitate persistence
     */
    public CFG_CategorieAbilitatePersistence getCFG_CategorieAbilitatePersistence() {
        return cfg_CategorieAbilitatePersistence;
    }

    /**
     * Sets the c f g_ categorie abilitate persistence.
     *
     * @param cfg_CategorieAbilitatePersistence the c f g_ categorie abilitate persistence
     */
    public void setCFG_CategorieAbilitatePersistence(
        CFG_CategorieAbilitatePersistence cfg_CategorieAbilitatePersistence) {
        this.cfg_CategorieAbilitatePersistence = cfg_CategorieAbilitatePersistence;
    }

    /**
     * Returns the news local service.
     *
     * @return the news local service
     */
    public it.sincon.sanita.services.service.NewsLocalService getNewsLocalService() {
        return newsLocalService;
    }

    /**
     * Sets the news local service.
     *
     * @param newsLocalService the news local service
     */
    public void setNewsLocalService(
        it.sincon.sanita.services.service.NewsLocalService newsLocalService) {
        this.newsLocalService = newsLocalService;
    }

    /**
     * Returns the news remote service.
     *
     * @return the news remote service
     */
    public it.sincon.sanita.services.service.NewsService getNewsService() {
        return newsService;
    }

    /**
     * Sets the news remote service.
     *
     * @param newsService the news remote service
     */
    public void setNewsService(
        it.sincon.sanita.services.service.NewsService newsService) {
        this.newsService = newsService;
    }

    /**
     * Returns the news persistence.
     *
     * @return the news persistence
     */
    public NewsPersistence getNewsPersistence() {
        return newsPersistence;
    }

    /**
     * Sets the news persistence.
     *
     * @param newsPersistence the news persistence
     */
    public void setNewsPersistence(NewsPersistence newsPersistence) {
        this.newsPersistence = newsPersistence;
    }

    /**
     * Returns the news finder.
     *
     * @return the news finder
     */
    public NewsFinder getNewsFinder() {
        return newsFinder;
    }

    /**
     * Sets the news finder.
     *
     * @param newsFinder the news finder
     */
    public void setNewsFinder(NewsFinder newsFinder) {
        this.newsFinder = newsFinder;
    }

    /**
     * Returns the struttura sanitaria local service.
     *
     * @return the struttura sanitaria local service
     */
    public it.sincon.sanita.services.service.StrutturaSanitariaLocalService getStrutturaSanitariaLocalService() {
        return strutturaSanitariaLocalService;
    }

    /**
     * Sets the struttura sanitaria local service.
     *
     * @param strutturaSanitariaLocalService the struttura sanitaria local service
     */
    public void setStrutturaSanitariaLocalService(
        it.sincon.sanita.services.service.StrutturaSanitariaLocalService strutturaSanitariaLocalService) {
        this.strutturaSanitariaLocalService = strutturaSanitariaLocalService;
    }

    /**
     * Returns the struttura sanitaria remote service.
     *
     * @return the struttura sanitaria remote service
     */
    public it.sincon.sanita.services.service.StrutturaSanitariaService getStrutturaSanitariaService() {
        return strutturaSanitariaService;
    }

    /**
     * Sets the struttura sanitaria remote service.
     *
     * @param strutturaSanitariaService the struttura sanitaria remote service
     */
    public void setStrutturaSanitariaService(
        it.sincon.sanita.services.service.StrutturaSanitariaService strutturaSanitariaService) {
        this.strutturaSanitariaService = strutturaSanitariaService;
    }

    /**
     * Returns the struttura sanitaria persistence.
     *
     * @return the struttura sanitaria persistence
     */
    public StrutturaSanitariaPersistence getStrutturaSanitariaPersistence() {
        return strutturaSanitariaPersistence;
    }

    /**
     * Sets the struttura sanitaria persistence.
     *
     * @param strutturaSanitariaPersistence the struttura sanitaria persistence
     */
    public void setStrutturaSanitariaPersistence(
        StrutturaSanitariaPersistence strutturaSanitariaPersistence) {
        this.strutturaSanitariaPersistence = strutturaSanitariaPersistence;
    }

    /**
     * Returns the struttura sanitaria finder.
     *
     * @return the struttura sanitaria finder
     */
    public StrutturaSanitariaFinder getStrutturaSanitariaFinder() {
        return strutturaSanitariaFinder;
    }

    /**
     * Sets the struttura sanitaria finder.
     *
     * @param strutturaSanitariaFinder the struttura sanitaria finder
     */
    public void setStrutturaSanitariaFinder(
        StrutturaSanitariaFinder strutturaSanitariaFinder) {
        this.strutturaSanitariaFinder = strutturaSanitariaFinder;
    }

    /**
     * Returns the struttura sanitaria figlia local service.
     *
     * @return the struttura sanitaria figlia local service
     */
    public it.sincon.sanita.services.service.StrutturaSanitariaFigliaLocalService getStrutturaSanitariaFigliaLocalService() {
        return strutturaSanitariaFigliaLocalService;
    }

    /**
     * Sets the struttura sanitaria figlia local service.
     *
     * @param strutturaSanitariaFigliaLocalService the struttura sanitaria figlia local service
     */
    public void setStrutturaSanitariaFigliaLocalService(
        it.sincon.sanita.services.service.StrutturaSanitariaFigliaLocalService strutturaSanitariaFigliaLocalService) {
        this.strutturaSanitariaFigliaLocalService = strutturaSanitariaFigliaLocalService;
    }

    /**
     * Returns the struttura sanitaria figlia remote service.
     *
     * @return the struttura sanitaria figlia remote service
     */
    public it.sincon.sanita.services.service.StrutturaSanitariaFigliaService getStrutturaSanitariaFigliaService() {
        return strutturaSanitariaFigliaService;
    }

    /**
     * Sets the struttura sanitaria figlia remote service.
     *
     * @param strutturaSanitariaFigliaService the struttura sanitaria figlia remote service
     */
    public void setStrutturaSanitariaFigliaService(
        it.sincon.sanita.services.service.StrutturaSanitariaFigliaService strutturaSanitariaFigliaService) {
        this.strutturaSanitariaFigliaService = strutturaSanitariaFigliaService;
    }

    /**
     * Returns the struttura sanitaria figlia persistence.
     *
     * @return the struttura sanitaria figlia persistence
     */
    public StrutturaSanitariaFigliaPersistence getStrutturaSanitariaFigliaPersistence() {
        return strutturaSanitariaFigliaPersistence;
    }

    /**
     * Sets the struttura sanitaria figlia persistence.
     *
     * @param strutturaSanitariaFigliaPersistence the struttura sanitaria figlia persistence
     */
    public void setStrutturaSanitariaFigliaPersistence(
        StrutturaSanitariaFigliaPersistence strutturaSanitariaFigliaPersistence) {
        this.strutturaSanitariaFigliaPersistence = strutturaSanitariaFigliaPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("it.sincon.sanita.services.model.News",
            newsLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "it.sincon.sanita.services.model.News");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return News.class;
    }

    protected String getModelClassName() {
        return News.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = newsPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
